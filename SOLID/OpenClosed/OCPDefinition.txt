The Open-Closed Principle (OCP) is one of the SOLID principles of object-oriented programming, specifically focusing on the design and architecture of software systems.
The principle states that "software entities (classes, modules, functions, etc.) should be open for extension but closed for modification."
In other words, you should be able to extend the behavior of a module without modifying its source code.

In C#, there are several ways to adhere to the Open-Closed Principle. Here are a few techniques commonly used:

1:  Abstraction and Polymorphism: Encapsulate common behavior in an abstract base class or interface and derive specific implementations from it.
    This allows you to introduce new behavior by creating new derived classes without modifying existing code.
    Existing code can depend on the abstraction instead of concrete implementations.

2:  Strategy Pattern: Define a set of interchangeable algorithms or behaviors encapsulated in separate classes.
    The client code can switch between strategies without modifying its implementation.

3:  Decorator Pattern: Wrap existing objects with new functionality by using decorator classes.
    The original object remains unmodified, and new behavior can be added dynamically.