The Interface Segregation Principle states that no client should be forced to depend on methods it does not use.
So, this is the basic definition which we can read in many different articles, but what does this really mean?

Let’s imagine that we are starting a new feature on our project. We start with some code and from that code,
an interface emerges with the required declarations.
Soon after, the customer decides that they want another feature that is similar to the previous one
and we decide to implement the same interface in another class.
But now, as a consequence, we don’t need all the methods from that interface, just some of them.
Of course, we have to implement all the methods, which we shouldn’t have to, and that’s the problem and where the ISP helps us a lot.

Basically, the ISP states that we should reduce code objects
down to the smallest required implementation thus creating interfaces with only required declarations.
As a result, an interface that has a lot of different declarations should be split up into smaller interfaces.
